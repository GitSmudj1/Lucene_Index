<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<doc>
  <docno>
    <textblock>FR940224-0-00051</textblock>
  </docno>
  <parent>
    <textblock>FR940224-0-00006</textblock>
  </parent>
  <text>
    <textblock>Rates should be calculated for all supported operand lengths considering both pipelined operations (if supported), and non-pipelined operations, using the fastest executing instruction for each operand length based on:</textblock>
    <textblock>1. Pipelined or register-to-register operations. Exclude extraordinarily short execution times generated for operations on a predetermined operand or operands (for example, multiplication by 0 or 1). If no register-to-register operations are implemented, continue with (2).</textblock>
    <textblock>2. The faster of register-to-memory or memory-to-register operations; if these also do not exist, then continue with (3).</textblock>
    <textblock>3. Memory-to-memory.</textblock>
    <textblock>In each case above, use the shortest execution time certified by the manufacturer.</textblock>
    <textblock>Step 2:</textblock>
    <textblock>TP for each supported operand length WL:</textblock>
    <textblock>Adjust the effective rate R (or R</textblock>
    <textblock>t</textblock>
    <textblock>) by the word length adjustment L as follows:</textblock>
    <textblock>TP=R * L, where L=(1/3+WL/96).</textblock>
    <textblock>Note:</textblock>
    <textblock>The word length WL used in these calculations is the operand length in bits. (If an operation uses operands of different lengths, select the largest word length.)</textblock>
    <textblock>The combination of a mantissa ALU and an exponent ALU of a floating point processor or unit is considered to be one ``computing element'' (``CE'') with a Word Length (WL) equal to the number of bits in the data representation (typically 32 or 64) for purposes of the ``Composite Theoretical Performance'' (``CTP'') calculation.</textblock>
    <textblock>This adjustment is not applied to specialized logic processors that do not use XOR instructions. In this case TP=R.</textblock>
    <textblock>Select the maximum resulting value of TP for:</textblock>
    <textblock>Each XP-only ``CE'' (R</textblock>
    <textblock>xp</textblock>
    <textblock>);</textblock>
    <textblock>Each FP-only ``CE'' (R</textblock>
    <textblock>fp</textblock>
    <textblock>);</textblock>
    <textblock>Each combined FP and XP ``CE'' (R);</textblock>
    <textblock>Each simple logic processor not implementing any of the specified arithmetic operations;</textblock>
    <textblock>and</textblock>
    <textblock>Each special logic processor not using any of the specified arithmetic or logic operations.</textblock>
    <textblock>Step 3: ``CTP'' for aggregations of ``CEs'', including CPUs:</textblock>
    <textblock>For a CPU with a single ``CE'', ``CTP''=TP (for CEs performing both fixed and floating point operations, TP=max (TP</textblock>
    <textblock>fp</textblock>
    <textblock>, TP</textblock>
    <textblock>xp</textblock>
    <textblock>)).</textblock>
    <textblock>``CTP'' for aggregations of multiple ``CEs'' operating simultaneously is calculated as follows:</textblock>
    <textblock>Note 1:</textblock>
    <textblock>For aggregrations that do not allow all of the ``CEs'' to run simultaneously, the possible combination of ``CEs'' that provides the largest ``CTP'' should be used. The TP of each contributing ``CE'' is to be calculated at its maximum value theoretically possible before the ``CTP'' of the combination is derived.</textblock>
    <textblock>N.B.:</textblock>
    <textblock>To determine the possible combinations of simultaneously operating ``CEs'', generate an instruction sequence that initiates operations in multiple ``CEs'', beginning with the slowest ``CE'' (the one needing the largest number of cycles to complete its operation) and ending with the fastest ``CE''. At each cycle of the sequence, the combination of ``CEs'' that are in operation during that cycle is a possible combination.</textblock>
    <textblock>The instruction sequence must take into account all hardware and/or architectural constraints on overlapping operations.</textblock>
    <textblock>Note 2:</textblock>
    <textblock>A single integrated circuit chip or board assembly may contain multiple ``CEs''.</textblock>
    <textblock>Note 3:</textblock>
    <textblock>Simultaneous operations are assumed to exist when the computer manufacturer claims concurrent, parallel or simultaneous operation or execution in a manual or brochure for the computer.</textblock>
  </text>
</doc>
